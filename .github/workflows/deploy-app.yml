name: deploy-app
on: 
    push:
        paths:
            - 'app/**'
    workflow_dispatch:

env:
    REGISTRY_LOGIN_SERVER: 'gdeolaguibel.azurecr.io'
    KEW_VAULT_SECRET_NAME_ACR_USERNAME: 'acr-username'
    KEW_VAULT_SECRET_NAME_ACR_PASSWORD: 'acr-password1'
    KEW_VAULT_NAME: 'gdeolaguibel-kv'
    IMAGE_BASE_NAME: 'gdeolaguibelapp-ex3'
    AZURE_WEBAPP_NAME: 'gdeolaguibel-ex3'
    CONTAINER_REGISTRY_NAME: 'gdeolaguibelacr'

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        # Checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main

        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: 'Get docker registry credentials from Azure key vault'
          uses: azure/CLI@v1
          with: 
            inlineScript: |
                echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{env.KEW_VAULT_SECRET_NAME_ACR_USERNAME}} --vault-name ${{env.KEW_VAULT_NAME}} --query value -o tsv)" >> $GITHUB_ENV
                echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{env.KEW_VAULT_SECRET_NAME_ACR_PASSWORD}} --vault-name ${{env.KEW_VAULT_NAME}} --query value -o tsv)" >> $GITHUB_ENV

        - name: 'Login Docker Registry'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
            username: ${{ env.REGISTRY_USERNAME }}
            password: ${{ env.REGISTRY_PASSWORD }}

        - name: 'Set image Version'
          id: image-version
          run: echo ::set-output name=version::$(echo $GITHUB_REF | sed 's#refs/heads/##')-$(date +'%Y.%m.%d.%H.%M')

        - name: 'Build and push image'
          working-directory: ./app
          run: |
            docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{env.IMAGE_BASE_NAME}}:${{ steps.image-version.outputs.version }}
            docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{env.IMAGE_BASE_NAME}}:${{ github.ref_name }}-latest
            docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{env.IMAGE_BASE_NAME}}:${{ steps.image-version.outputs.version }}
            docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{env.IMAGE_BASE_NAME}}:${{ github.ref_name }}-latest
        outputs:
            imageVersion: ${{ steps.image-version.outputs.version }}

    deploy:
        runs-on: ubuntu-latest
        needs: build
        steps:

        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: 'Check if ACR exists'
          id: check-acr
          run: |
            exists exists=$(az acr show --name ${{env.CONTAINER_REGISTRY_NAME}} --query 'id' -o tsv)
            echo "::set-output name=acr_exists::${exists}"

        - name: 'Deploy Bicep template with conditional ACR handling'
          run: |
            if [ -z "${{ steps.check_acr.outputs.acr_exists }}" ]; then
              # ACR does not exist, deploy with placeholder credentials
              az deployment group create --template-file main.bicep --parameters keyVaultSecretNameACRUsername='placeholder' keyVaultSecretNameACRPassword1='placeholder'
            else
              # ACR exists, deploy with real credentials
              az deployment group create --template-file main.bicep
            with:
              app-name: ${{env.AZURE_WEBAPP_NAME}}
              images: ${{env.REGISTRY_LOGIN_SERVER}}/${{env.IMAGE_BASE_NAME}}:${{needs.build.outputs.imageVersion}}
